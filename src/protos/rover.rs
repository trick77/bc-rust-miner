// This file is generated by rust-protobuf 2.0.4. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct RoverIdent {
    // message fields
    pub rover_name: ::std::string::String,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl RoverIdent {
    pub fn new() -> RoverIdent {
        ::std::default::Default::default()
    }

    // string rover_name = 1;

    pub fn clear_rover_name(&mut self) {
        self.rover_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_rover_name(&mut self, v: ::std::string::String) {
        self.rover_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rover_name(&mut self) -> &mut ::std::string::String {
        &mut self.rover_name
    }

    // Take field
    pub fn take_rover_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rover_name, ::std::string::String::new())
    }

    pub fn get_rover_name(&self) -> &str {
        &self.rover_name
    }
}

impl ::protobuf::Message for RoverIdent {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rover_name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.rover_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.rover_name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.rover_name.is_empty() {
            os.write_string(1, &self.rover_name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RoverIdent {
        RoverIdent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "rover_name",
                    |m: &RoverIdent| { &m.rover_name },
                    |m: &mut RoverIdent| { &mut m.rover_name },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RoverIdent>(
                    "RoverIdent",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RoverIdent {
        static mut instance: ::protobuf::lazy::Lazy<RoverIdent> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RoverIdent,
        };
        unsafe {
            instance.get(RoverIdent::new)
        }
    }
}

impl ::protobuf::Clear for RoverIdent {
    fn clear(&mut self) {
        self.clear_rover_name();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RoverIdent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RoverIdent {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RoverSyncStatus {
    // message fields
    pub rover_name: ::std::string::String,
    pub status: bool,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl RoverSyncStatus {
    pub fn new() -> RoverSyncStatus {
        ::std::default::Default::default()
    }

    // string rover_name = 1;

    pub fn clear_rover_name(&mut self) {
        self.rover_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_rover_name(&mut self, v: ::std::string::String) {
        self.rover_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rover_name(&mut self) -> &mut ::std::string::String {
        &mut self.rover_name
    }

    // Take field
    pub fn take_rover_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rover_name, ::std::string::String::new())
    }

    pub fn get_rover_name(&self) -> &str {
        &self.rover_name
    }

    // bool status = 2;

    pub fn clear_status(&mut self) {
        self.status = false;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: bool) {
        self.status = v;
    }

    pub fn get_status(&self) -> bool {
        self.status
    }
}

impl ::protobuf::Message for RoverSyncStatus {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rover_name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.status = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.rover_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.rover_name);
        }
        if self.status != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.rover_name.is_empty() {
            os.write_string(1, &self.rover_name)?;
        }
        if self.status != false {
            os.write_bool(2, self.status)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RoverSyncStatus {
        RoverSyncStatus::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "rover_name",
                    |m: &RoverSyncStatus| { &m.rover_name },
                    |m: &mut RoverSyncStatus| { &mut m.rover_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "status",
                    |m: &RoverSyncStatus| { &m.status },
                    |m: &mut RoverSyncStatus| { &mut m.status },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RoverSyncStatus>(
                    "RoverSyncStatus",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RoverSyncStatus {
        static mut instance: ::protobuf::lazy::Lazy<RoverSyncStatus> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RoverSyncStatus,
        };
        unsafe {
            instance.get(RoverSyncStatus::new)
        }
    }
}

impl ::protobuf::Clear for RoverSyncStatus {
    fn clear(&mut self) {
        self.clear_rover_name();
        self.clear_status();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RoverSyncStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RoverSyncStatus {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RoverMessage {
    // message fields
    pub field_type: RoverMessageType,
    // message oneof groups
    pub payload: ::std::option::Option<RoverMessage_oneof_payload>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

#[derive(Clone,PartialEq)]
pub enum RoverMessage_oneof_payload {
    resync(RoverMessage_Resync),
    fetch_block(RoverMessage_FetchBlock),
    rover_block_range(RoverMessage_RoverBlockRange),
}

impl RoverMessage {
    pub fn new() -> RoverMessage {
        ::std::default::Default::default()
    }

    // .bc.RoverMessageType type = 1;

    pub fn clear_field_type(&mut self) {
        self.field_type = RoverMessageType::FetchBlock;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: RoverMessageType) {
        self.field_type = v;
    }

    pub fn get_field_type(&self) -> RoverMessageType {
        self.field_type
    }

    // .bc.RoverMessage.Resync resync = 2;

    pub fn clear_resync(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_resync(&self) -> bool {
        match self.payload {
            ::std::option::Option::Some(RoverMessage_oneof_payload::resync(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_resync(&mut self, v: RoverMessage_Resync) {
        self.payload = ::std::option::Option::Some(RoverMessage_oneof_payload::resync(v))
    }

    // Mutable pointer to the field.
    pub fn mut_resync(&mut self) -> &mut RoverMessage_Resync {
        if let ::std::option::Option::Some(RoverMessage_oneof_payload::resync(_)) = self.payload {
        } else {
            self.payload = ::std::option::Option::Some(RoverMessage_oneof_payload::resync(RoverMessage_Resync::new()));
        }
        match self.payload {
            ::std::option::Option::Some(RoverMessage_oneof_payload::resync(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_resync(&mut self) -> RoverMessage_Resync {
        if self.has_resync() {
            match self.payload.take() {
                ::std::option::Option::Some(RoverMessage_oneof_payload::resync(v)) => v,
                _ => panic!(),
            }
        } else {
            RoverMessage_Resync::new()
        }
    }

    pub fn get_resync(&self) -> &RoverMessage_Resync {
        match self.payload {
            ::std::option::Option::Some(RoverMessage_oneof_payload::resync(ref v)) => v,
            _ => RoverMessage_Resync::default_instance(),
        }
    }

    // .bc.RoverMessage.FetchBlock fetch_block = 3;

    pub fn clear_fetch_block(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_fetch_block(&self) -> bool {
        match self.payload {
            ::std::option::Option::Some(RoverMessage_oneof_payload::fetch_block(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_fetch_block(&mut self, v: RoverMessage_FetchBlock) {
        self.payload = ::std::option::Option::Some(RoverMessage_oneof_payload::fetch_block(v))
    }

    // Mutable pointer to the field.
    pub fn mut_fetch_block(&mut self) -> &mut RoverMessage_FetchBlock {
        if let ::std::option::Option::Some(RoverMessage_oneof_payload::fetch_block(_)) = self.payload {
        } else {
            self.payload = ::std::option::Option::Some(RoverMessage_oneof_payload::fetch_block(RoverMessage_FetchBlock::new()));
        }
        match self.payload {
            ::std::option::Option::Some(RoverMessage_oneof_payload::fetch_block(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_fetch_block(&mut self) -> RoverMessage_FetchBlock {
        if self.has_fetch_block() {
            match self.payload.take() {
                ::std::option::Option::Some(RoverMessage_oneof_payload::fetch_block(v)) => v,
                _ => panic!(),
            }
        } else {
            RoverMessage_FetchBlock::new()
        }
    }

    pub fn get_fetch_block(&self) -> &RoverMessage_FetchBlock {
        match self.payload {
            ::std::option::Option::Some(RoverMessage_oneof_payload::fetch_block(ref v)) => v,
            _ => RoverMessage_FetchBlock::default_instance(),
        }
    }

    // .bc.RoverMessage.RoverBlockRange rover_block_range = 4;

    pub fn clear_rover_block_range(&mut self) {
        self.payload = ::std::option::Option::None;
    }

    pub fn has_rover_block_range(&self) -> bool {
        match self.payload {
            ::std::option::Option::Some(RoverMessage_oneof_payload::rover_block_range(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_rover_block_range(&mut self, v: RoverMessage_RoverBlockRange) {
        self.payload = ::std::option::Option::Some(RoverMessage_oneof_payload::rover_block_range(v))
    }

    // Mutable pointer to the field.
    pub fn mut_rover_block_range(&mut self) -> &mut RoverMessage_RoverBlockRange {
        if let ::std::option::Option::Some(RoverMessage_oneof_payload::rover_block_range(_)) = self.payload {
        } else {
            self.payload = ::std::option::Option::Some(RoverMessage_oneof_payload::rover_block_range(RoverMessage_RoverBlockRange::new()));
        }
        match self.payload {
            ::std::option::Option::Some(RoverMessage_oneof_payload::rover_block_range(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_rover_block_range(&mut self) -> RoverMessage_RoverBlockRange {
        if self.has_rover_block_range() {
            match self.payload.take() {
                ::std::option::Option::Some(RoverMessage_oneof_payload::rover_block_range(v)) => v,
                _ => panic!(),
            }
        } else {
            RoverMessage_RoverBlockRange::new()
        }
    }

    pub fn get_rover_block_range(&self) -> &RoverMessage_RoverBlockRange {
        match self.payload {
            ::std::option::Option::Some(RoverMessage_oneof_payload::rover_block_range(ref v)) => v,
            _ => RoverMessage_RoverBlockRange::default_instance(),
        }
    }
}

impl ::protobuf::Message for RoverMessage {
    fn is_initialized(&self) -> bool {
        if let Some(RoverMessage_oneof_payload::resync(ref v)) = self.payload {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(RoverMessage_oneof_payload::fetch_block(ref v)) = self.payload {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(RoverMessage_oneof_payload::rover_block_range(ref v)) = self.payload {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.payload = ::std::option::Option::Some(RoverMessage_oneof_payload::resync(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.payload = ::std::option::Option::Some(RoverMessage_oneof_payload::fetch_block(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.payload = ::std::option::Option::Some(RoverMessage_oneof_payload::rover_block_range(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.field_type != RoverMessageType::FetchBlock {
            my_size += ::protobuf::rt::enum_size(1, self.field_type);
        }
        if let ::std::option::Option::Some(ref v) = self.payload {
            match v {
                &RoverMessage_oneof_payload::resync(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &RoverMessage_oneof_payload::fetch_block(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &RoverMessage_oneof_payload::rover_block_range(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.field_type != RoverMessageType::FetchBlock {
            os.write_enum(1, self.field_type.value())?;
        }
        if let ::std::option::Option::Some(ref v) = self.payload {
            match v {
                &RoverMessage_oneof_payload::resync(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &RoverMessage_oneof_payload::fetch_block(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &RoverMessage_oneof_payload::rover_block_range(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RoverMessage {
        RoverMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<RoverMessageType>>(
                    "type",
                    |m: &RoverMessage| { &m.field_type },
                    |m: &mut RoverMessage| { &mut m.field_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, RoverMessage_Resync>(
                    "resync",
                    RoverMessage::has_resync,
                    RoverMessage::get_resync,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, RoverMessage_FetchBlock>(
                    "fetch_block",
                    RoverMessage::has_fetch_block,
                    RoverMessage::get_fetch_block,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, RoverMessage_RoverBlockRange>(
                    "rover_block_range",
                    RoverMessage::has_rover_block_range,
                    RoverMessage::get_rover_block_range,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RoverMessage>(
                    "RoverMessage",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RoverMessage {
        static mut instance: ::protobuf::lazy::Lazy<RoverMessage> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RoverMessage,
        };
        unsafe {
            instance.get(RoverMessage::new)
        }
    }
}

impl ::protobuf::Clear for RoverMessage {
    fn clear(&mut self) {
        self.clear_field_type();
        self.clear_resync();
        self.clear_fetch_block();
        self.clear_rover_block_range();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RoverMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RoverMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RoverMessage_FetchBlock {
    // message fields
    pub from_block: ::protobuf::SingularPtrField<super::core::Block>,
    pub to_block: ::protobuf::SingularPtrField<super::core::Block>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl RoverMessage_FetchBlock {
    pub fn new() -> RoverMessage_FetchBlock {
        ::std::default::Default::default()
    }

    // .bc.Block from_block = 1;

    pub fn clear_from_block(&mut self) {
        self.from_block.clear();
    }

    pub fn has_from_block(&self) -> bool {
        self.from_block.is_some()
    }

    // Param is passed by value, moved
    pub fn set_from_block(&mut self, v: super::core::Block) {
        self.from_block = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_from_block(&mut self) -> &mut super::core::Block {
        if self.from_block.is_none() {
            self.from_block.set_default();
        }
        self.from_block.as_mut().unwrap()
    }

    // Take field
    pub fn take_from_block(&mut self) -> super::core::Block {
        self.from_block.take().unwrap_or_else(|| super::core::Block::new())
    }

    pub fn get_from_block(&self) -> &super::core::Block {
        self.from_block.as_ref().unwrap_or_else(|| super::core::Block::default_instance())
    }

    // .bc.Block to_block = 2;

    pub fn clear_to_block(&mut self) {
        self.to_block.clear();
    }

    pub fn has_to_block(&self) -> bool {
        self.to_block.is_some()
    }

    // Param is passed by value, moved
    pub fn set_to_block(&mut self, v: super::core::Block) {
        self.to_block = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_to_block(&mut self) -> &mut super::core::Block {
        if self.to_block.is_none() {
            self.to_block.set_default();
        }
        self.to_block.as_mut().unwrap()
    }

    // Take field
    pub fn take_to_block(&mut self) -> super::core::Block {
        self.to_block.take().unwrap_or_else(|| super::core::Block::new())
    }

    pub fn get_to_block(&self) -> &super::core::Block {
        self.to_block.as_ref().unwrap_or_else(|| super::core::Block::default_instance())
    }
}

impl ::protobuf::Message for RoverMessage_FetchBlock {
    fn is_initialized(&self) -> bool {
        for v in &self.from_block {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.to_block {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.from_block)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.to_block)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.from_block.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.to_block.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.from_block.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.to_block.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RoverMessage_FetchBlock {
        RoverMessage_FetchBlock::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::core::Block>>(
                    "from_block",
                    |m: &RoverMessage_FetchBlock| { &m.from_block },
                    |m: &mut RoverMessage_FetchBlock| { &mut m.from_block },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::core::Block>>(
                    "to_block",
                    |m: &RoverMessage_FetchBlock| { &m.to_block },
                    |m: &mut RoverMessage_FetchBlock| { &mut m.to_block },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RoverMessage_FetchBlock>(
                    "RoverMessage_FetchBlock",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RoverMessage_FetchBlock {
        static mut instance: ::protobuf::lazy::Lazy<RoverMessage_FetchBlock> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RoverMessage_FetchBlock,
        };
        unsafe {
            instance.get(RoverMessage_FetchBlock::new)
        }
    }
}

impl ::protobuf::Clear for RoverMessage_FetchBlock {
    fn clear(&mut self) {
        self.clear_from_block();
        self.clear_to_block();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RoverMessage_FetchBlock {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RoverMessage_FetchBlock {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RoverMessage_RoverBlockRange {
    // message fields
    pub rover_name: ::std::string::String,
    pub highest_height: u64,
    pub lowest_height: u64,
    pub highest_hash: ::std::string::String,
    pub lowest_hash: ::std::string::String,
    pub synced: ::std::string::String,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl RoverMessage_RoverBlockRange {
    pub fn new() -> RoverMessage_RoverBlockRange {
        ::std::default::Default::default()
    }

    // string rover_name = 1;

    pub fn clear_rover_name(&mut self) {
        self.rover_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_rover_name(&mut self, v: ::std::string::String) {
        self.rover_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rover_name(&mut self) -> &mut ::std::string::String {
        &mut self.rover_name
    }

    // Take field
    pub fn take_rover_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rover_name, ::std::string::String::new())
    }

    pub fn get_rover_name(&self) -> &str {
        &self.rover_name
    }

    // uint64 highest_height = 2;

    pub fn clear_highest_height(&mut self) {
        self.highest_height = 0;
    }

    // Param is passed by value, moved
    pub fn set_highest_height(&mut self, v: u64) {
        self.highest_height = v;
    }

    pub fn get_highest_height(&self) -> u64 {
        self.highest_height
    }

    // uint64 lowest_height = 3;

    pub fn clear_lowest_height(&mut self) {
        self.lowest_height = 0;
    }

    // Param is passed by value, moved
    pub fn set_lowest_height(&mut self, v: u64) {
        self.lowest_height = v;
    }

    pub fn get_lowest_height(&self) -> u64 {
        self.lowest_height
    }

    // string highest_hash = 4;

    pub fn clear_highest_hash(&mut self) {
        self.highest_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_highest_hash(&mut self, v: ::std::string::String) {
        self.highest_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_highest_hash(&mut self) -> &mut ::std::string::String {
        &mut self.highest_hash
    }

    // Take field
    pub fn take_highest_hash(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.highest_hash, ::std::string::String::new())
    }

    pub fn get_highest_hash(&self) -> &str {
        &self.highest_hash
    }

    // string lowest_hash = 5;

    pub fn clear_lowest_hash(&mut self) {
        self.lowest_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_lowest_hash(&mut self, v: ::std::string::String) {
        self.lowest_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_lowest_hash(&mut self) -> &mut ::std::string::String {
        &mut self.lowest_hash
    }

    // Take field
    pub fn take_lowest_hash(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.lowest_hash, ::std::string::String::new())
    }

    pub fn get_lowest_hash(&self) -> &str {
        &self.lowest_hash
    }

    // string synced = 6;

    pub fn clear_synced(&mut self) {
        self.synced.clear();
    }

    // Param is passed by value, moved
    pub fn set_synced(&mut self, v: ::std::string::String) {
        self.synced = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_synced(&mut self) -> &mut ::std::string::String {
        &mut self.synced
    }

    // Take field
    pub fn take_synced(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.synced, ::std::string::String::new())
    }

    pub fn get_synced(&self) -> &str {
        &self.synced
    }
}

impl ::protobuf::Message for RoverMessage_RoverBlockRange {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rover_name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.highest_height = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.lowest_height = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.highest_hash)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.lowest_hash)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.synced)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.rover_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.rover_name);
        }
        if self.highest_height != 0 {
            my_size += ::protobuf::rt::value_size(2, self.highest_height, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.lowest_height != 0 {
            my_size += ::protobuf::rt::value_size(3, self.lowest_height, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.highest_hash.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.highest_hash);
        }
        if !self.lowest_hash.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.lowest_hash);
        }
        if !self.synced.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.synced);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.rover_name.is_empty() {
            os.write_string(1, &self.rover_name)?;
        }
        if self.highest_height != 0 {
            os.write_uint64(2, self.highest_height)?;
        }
        if self.lowest_height != 0 {
            os.write_uint64(3, self.lowest_height)?;
        }
        if !self.highest_hash.is_empty() {
            os.write_string(4, &self.highest_hash)?;
        }
        if !self.lowest_hash.is_empty() {
            os.write_string(5, &self.lowest_hash)?;
        }
        if !self.synced.is_empty() {
            os.write_string(6, &self.synced)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RoverMessage_RoverBlockRange {
        RoverMessage_RoverBlockRange::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "rover_name",
                    |m: &RoverMessage_RoverBlockRange| { &m.rover_name },
                    |m: &mut RoverMessage_RoverBlockRange| { &mut m.rover_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "highest_height",
                    |m: &RoverMessage_RoverBlockRange| { &m.highest_height },
                    |m: &mut RoverMessage_RoverBlockRange| { &mut m.highest_height },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "lowest_height",
                    |m: &RoverMessage_RoverBlockRange| { &m.lowest_height },
                    |m: &mut RoverMessage_RoverBlockRange| { &mut m.lowest_height },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "highest_hash",
                    |m: &RoverMessage_RoverBlockRange| { &m.highest_hash },
                    |m: &mut RoverMessage_RoverBlockRange| { &mut m.highest_hash },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "lowest_hash",
                    |m: &RoverMessage_RoverBlockRange| { &m.lowest_hash },
                    |m: &mut RoverMessage_RoverBlockRange| { &mut m.lowest_hash },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "synced",
                    |m: &RoverMessage_RoverBlockRange| { &m.synced },
                    |m: &mut RoverMessage_RoverBlockRange| { &mut m.synced },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RoverMessage_RoverBlockRange>(
                    "RoverMessage_RoverBlockRange",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RoverMessage_RoverBlockRange {
        static mut instance: ::protobuf::lazy::Lazy<RoverMessage_RoverBlockRange> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RoverMessage_RoverBlockRange,
        };
        unsafe {
            instance.get(RoverMessage_RoverBlockRange::new)
        }
    }
}

impl ::protobuf::Clear for RoverMessage_RoverBlockRange {
    fn clear(&mut self) {
        self.clear_rover_name();
        self.clear_highest_height();
        self.clear_lowest_height();
        self.clear_highest_hash();
        self.clear_lowest_hash();
        self.clear_synced();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RoverMessage_RoverBlockRange {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RoverMessage_RoverBlockRange {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RoverMessage_Resync {
    // message fields
    pub latest_block: ::protobuf::SingularPtrField<super::core::Block>,
    pub intervals: ::protobuf::RepeatedField<RoverMessage_Resync_Interval>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl RoverMessage_Resync {
    pub fn new() -> RoverMessage_Resync {
        ::std::default::Default::default()
    }

    // .bc.Block latest_block = 1;

    pub fn clear_latest_block(&mut self) {
        self.latest_block.clear();
    }

    pub fn has_latest_block(&self) -> bool {
        self.latest_block.is_some()
    }

    // Param is passed by value, moved
    pub fn set_latest_block(&mut self, v: super::core::Block) {
        self.latest_block = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_latest_block(&mut self) -> &mut super::core::Block {
        if self.latest_block.is_none() {
            self.latest_block.set_default();
        }
        self.latest_block.as_mut().unwrap()
    }

    // Take field
    pub fn take_latest_block(&mut self) -> super::core::Block {
        self.latest_block.take().unwrap_or_else(|| super::core::Block::new())
    }

    pub fn get_latest_block(&self) -> &super::core::Block {
        self.latest_block.as_ref().unwrap_or_else(|| super::core::Block::default_instance())
    }

    // repeated .bc.RoverMessage.Resync.Interval intervals = 2;

    pub fn clear_intervals(&mut self) {
        self.intervals.clear();
    }

    // Param is passed by value, moved
    pub fn set_intervals(&mut self, v: ::protobuf::RepeatedField<RoverMessage_Resync_Interval>) {
        self.intervals = v;
    }

    // Mutable pointer to the field.
    pub fn mut_intervals(&mut self) -> &mut ::protobuf::RepeatedField<RoverMessage_Resync_Interval> {
        &mut self.intervals
    }

    // Take field
    pub fn take_intervals(&mut self) -> ::protobuf::RepeatedField<RoverMessage_Resync_Interval> {
        ::std::mem::replace(&mut self.intervals, ::protobuf::RepeatedField::new())
    }

    pub fn get_intervals(&self) -> &[RoverMessage_Resync_Interval] {
        &self.intervals
    }
}

impl ::protobuf::Message for RoverMessage_Resync {
    fn is_initialized(&self) -> bool {
        for v in &self.latest_block {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.intervals {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.latest_block)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.intervals)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.latest_block.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.intervals {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.latest_block.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.intervals {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RoverMessage_Resync {
        RoverMessage_Resync::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::core::Block>>(
                    "latest_block",
                    |m: &RoverMessage_Resync| { &m.latest_block },
                    |m: &mut RoverMessage_Resync| { &mut m.latest_block },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RoverMessage_Resync_Interval>>(
                    "intervals",
                    |m: &RoverMessage_Resync| { &m.intervals },
                    |m: &mut RoverMessage_Resync| { &mut m.intervals },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RoverMessage_Resync>(
                    "RoverMessage_Resync",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RoverMessage_Resync {
        static mut instance: ::protobuf::lazy::Lazy<RoverMessage_Resync> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RoverMessage_Resync,
        };
        unsafe {
            instance.get(RoverMessage_Resync::new)
        }
    }
}

impl ::protobuf::Clear for RoverMessage_Resync {
    fn clear(&mut self) {
        self.clear_latest_block();
        self.clear_intervals();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RoverMessage_Resync {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RoverMessage_Resync {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RoverMessage_Resync_Interval {
    // message fields
    pub from_block: ::protobuf::SingularPtrField<super::core::Block>,
    pub to_block: ::protobuf::SingularPtrField<super::core::Block>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl RoverMessage_Resync_Interval {
    pub fn new() -> RoverMessage_Resync_Interval {
        ::std::default::Default::default()
    }

    // .bc.Block from_block = 1;

    pub fn clear_from_block(&mut self) {
        self.from_block.clear();
    }

    pub fn has_from_block(&self) -> bool {
        self.from_block.is_some()
    }

    // Param is passed by value, moved
    pub fn set_from_block(&mut self, v: super::core::Block) {
        self.from_block = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_from_block(&mut self) -> &mut super::core::Block {
        if self.from_block.is_none() {
            self.from_block.set_default();
        }
        self.from_block.as_mut().unwrap()
    }

    // Take field
    pub fn take_from_block(&mut self) -> super::core::Block {
        self.from_block.take().unwrap_or_else(|| super::core::Block::new())
    }

    pub fn get_from_block(&self) -> &super::core::Block {
        self.from_block.as_ref().unwrap_or_else(|| super::core::Block::default_instance())
    }

    // .bc.Block to_block = 2;

    pub fn clear_to_block(&mut self) {
        self.to_block.clear();
    }

    pub fn has_to_block(&self) -> bool {
        self.to_block.is_some()
    }

    // Param is passed by value, moved
    pub fn set_to_block(&mut self, v: super::core::Block) {
        self.to_block = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_to_block(&mut self) -> &mut super::core::Block {
        if self.to_block.is_none() {
            self.to_block.set_default();
        }
        self.to_block.as_mut().unwrap()
    }

    // Take field
    pub fn take_to_block(&mut self) -> super::core::Block {
        self.to_block.take().unwrap_or_else(|| super::core::Block::new())
    }

    pub fn get_to_block(&self) -> &super::core::Block {
        self.to_block.as_ref().unwrap_or_else(|| super::core::Block::default_instance())
    }
}

impl ::protobuf::Message for RoverMessage_Resync_Interval {
    fn is_initialized(&self) -> bool {
        for v in &self.from_block {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.to_block {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.from_block)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.to_block)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.from_block.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.to_block.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.from_block.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.to_block.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RoverMessage_Resync_Interval {
        RoverMessage_Resync_Interval::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::core::Block>>(
                    "from_block",
                    |m: &RoverMessage_Resync_Interval| { &m.from_block },
                    |m: &mut RoverMessage_Resync_Interval| { &mut m.from_block },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::core::Block>>(
                    "to_block",
                    |m: &RoverMessage_Resync_Interval| { &m.to_block },
                    |m: &mut RoverMessage_Resync_Interval| { &mut m.to_block },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RoverMessage_Resync_Interval>(
                    "RoverMessage_Resync_Interval",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RoverMessage_Resync_Interval {
        static mut instance: ::protobuf::lazy::Lazy<RoverMessage_Resync_Interval> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RoverMessage_Resync_Interval,
        };
        unsafe {
            instance.get(RoverMessage_Resync_Interval::new)
        }
    }
}

impl ::protobuf::Clear for RoverMessage_Resync_Interval {
    fn clear(&mut self) {
        self.clear_from_block();
        self.clear_to_block();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RoverMessage_Resync_Interval {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RoverMessage_Resync_Interval {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SettleTxCheckReq {
    // message fields
    pub possible_transactions: ::protobuf::RepeatedField<SettleTxCheckReq_PossibleTransaction>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl SettleTxCheckReq {
    pub fn new() -> SettleTxCheckReq {
        ::std::default::Default::default()
    }

    // repeated .bc.SettleTxCheckReq.PossibleTransaction possible_transactions = 1;

    pub fn clear_possible_transactions(&mut self) {
        self.possible_transactions.clear();
    }

    // Param is passed by value, moved
    pub fn set_possible_transactions(&mut self, v: ::protobuf::RepeatedField<SettleTxCheckReq_PossibleTransaction>) {
        self.possible_transactions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_possible_transactions(&mut self) -> &mut ::protobuf::RepeatedField<SettleTxCheckReq_PossibleTransaction> {
        &mut self.possible_transactions
    }

    // Take field
    pub fn take_possible_transactions(&mut self) -> ::protobuf::RepeatedField<SettleTxCheckReq_PossibleTransaction> {
        ::std::mem::replace(&mut self.possible_transactions, ::protobuf::RepeatedField::new())
    }

    pub fn get_possible_transactions(&self) -> &[SettleTxCheckReq_PossibleTransaction] {
        &self.possible_transactions
    }
}

impl ::protobuf::Message for SettleTxCheckReq {
    fn is_initialized(&self) -> bool {
        for v in &self.possible_transactions {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.possible_transactions)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.possible_transactions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.possible_transactions {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SettleTxCheckReq {
        SettleTxCheckReq::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SettleTxCheckReq_PossibleTransaction>>(
                    "possible_transactions",
                    |m: &SettleTxCheckReq| { &m.possible_transactions },
                    |m: &mut SettleTxCheckReq| { &mut m.possible_transactions },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SettleTxCheckReq>(
                    "SettleTxCheckReq",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SettleTxCheckReq {
        static mut instance: ::protobuf::lazy::Lazy<SettleTxCheckReq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SettleTxCheckReq,
        };
        unsafe {
            instance.get(SettleTxCheckReq::new)
        }
    }
}

impl ::protobuf::Clear for SettleTxCheckReq {
    fn clear(&mut self) {
        self.clear_possible_transactions();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SettleTxCheckReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SettleTxCheckReq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SettleTxCheckReq_PossibleTransaction {
    // message fields
    pub addr_to: ::std::string::String,
    pub addr_from: ::std::string::String,
    pub value: ::std::vec::Vec<u8>,
    pub bridged_chain: ::std::string::String,
    pub tx_id: ::std::string::String,
    pub block_height: u64,
    pub token_type: ::std::string::String,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl SettleTxCheckReq_PossibleTransaction {
    pub fn new() -> SettleTxCheckReq_PossibleTransaction {
        ::std::default::Default::default()
    }

    // string addr_to = 1;

    pub fn clear_addr_to(&mut self) {
        self.addr_to.clear();
    }

    // Param is passed by value, moved
    pub fn set_addr_to(&mut self, v: ::std::string::String) {
        self.addr_to = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_addr_to(&mut self) -> &mut ::std::string::String {
        &mut self.addr_to
    }

    // Take field
    pub fn take_addr_to(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.addr_to, ::std::string::String::new())
    }

    pub fn get_addr_to(&self) -> &str {
        &self.addr_to
    }

    // string addr_from = 2;

    pub fn clear_addr_from(&mut self) {
        self.addr_from.clear();
    }

    // Param is passed by value, moved
    pub fn set_addr_from(&mut self, v: ::std::string::String) {
        self.addr_from = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_addr_from(&mut self) -> &mut ::std::string::String {
        &mut self.addr_from
    }

    // Take field
    pub fn take_addr_from(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.addr_from, ::std::string::String::new())
    }

    pub fn get_addr_from(&self) -> &str {
        &self.addr_from
    }

    // bytes value = 3;

    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.value, ::std::vec::Vec::new())
    }

    pub fn get_value(&self) -> &[u8] {
        &self.value
    }

    // string bridged_chain = 4;

    pub fn clear_bridged_chain(&mut self) {
        self.bridged_chain.clear();
    }

    // Param is passed by value, moved
    pub fn set_bridged_chain(&mut self, v: ::std::string::String) {
        self.bridged_chain = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bridged_chain(&mut self) -> &mut ::std::string::String {
        &mut self.bridged_chain
    }

    // Take field
    pub fn take_bridged_chain(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bridged_chain, ::std::string::String::new())
    }

    pub fn get_bridged_chain(&self) -> &str {
        &self.bridged_chain
    }

    // string tx_id = 5;

    pub fn clear_tx_id(&mut self) {
        self.tx_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_tx_id(&mut self, v: ::std::string::String) {
        self.tx_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tx_id(&mut self) -> &mut ::std::string::String {
        &mut self.tx_id
    }

    // Take field
    pub fn take_tx_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.tx_id, ::std::string::String::new())
    }

    pub fn get_tx_id(&self) -> &str {
        &self.tx_id
    }

    // uint64 block_height = 6;

    pub fn clear_block_height(&mut self) {
        self.block_height = 0;
    }

    // Param is passed by value, moved
    pub fn set_block_height(&mut self, v: u64) {
        self.block_height = v;
    }

    pub fn get_block_height(&self) -> u64 {
        self.block_height
    }

    // string token_type = 7;

    pub fn clear_token_type(&mut self) {
        self.token_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_token_type(&mut self, v: ::std::string::String) {
        self.token_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token_type(&mut self) -> &mut ::std::string::String {
        &mut self.token_type
    }

    // Take field
    pub fn take_token_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.token_type, ::std::string::String::new())
    }

    pub fn get_token_type(&self) -> &str {
        &self.token_type
    }
}

impl ::protobuf::Message for SettleTxCheckReq_PossibleTransaction {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.addr_to)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.addr_from)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.value)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bridged_chain)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.tx_id)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.block_height = tmp;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.token_type)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.addr_to.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.addr_to);
        }
        if !self.addr_from.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.addr_from);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.value);
        }
        if !self.bridged_chain.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.bridged_chain);
        }
        if !self.tx_id.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.tx_id);
        }
        if self.block_height != 0 {
            my_size += ::protobuf::rt::value_size(6, self.block_height, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.token_type.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.token_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.addr_to.is_empty() {
            os.write_string(1, &self.addr_to)?;
        }
        if !self.addr_from.is_empty() {
            os.write_string(2, &self.addr_from)?;
        }
        if !self.value.is_empty() {
            os.write_bytes(3, &self.value)?;
        }
        if !self.bridged_chain.is_empty() {
            os.write_string(4, &self.bridged_chain)?;
        }
        if !self.tx_id.is_empty() {
            os.write_string(5, &self.tx_id)?;
        }
        if self.block_height != 0 {
            os.write_uint64(6, self.block_height)?;
        }
        if !self.token_type.is_empty() {
            os.write_string(7, &self.token_type)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SettleTxCheckReq_PossibleTransaction {
        SettleTxCheckReq_PossibleTransaction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "addr_to",
                    |m: &SettleTxCheckReq_PossibleTransaction| { &m.addr_to },
                    |m: &mut SettleTxCheckReq_PossibleTransaction| { &mut m.addr_to },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "addr_from",
                    |m: &SettleTxCheckReq_PossibleTransaction| { &m.addr_from },
                    |m: &mut SettleTxCheckReq_PossibleTransaction| { &mut m.addr_from },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "value",
                    |m: &SettleTxCheckReq_PossibleTransaction| { &m.value },
                    |m: &mut SettleTxCheckReq_PossibleTransaction| { &mut m.value },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "bridged_chain",
                    |m: &SettleTxCheckReq_PossibleTransaction| { &m.bridged_chain },
                    |m: &mut SettleTxCheckReq_PossibleTransaction| { &mut m.bridged_chain },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "tx_id",
                    |m: &SettleTxCheckReq_PossibleTransaction| { &m.tx_id },
                    |m: &mut SettleTxCheckReq_PossibleTransaction| { &mut m.tx_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "block_height",
                    |m: &SettleTxCheckReq_PossibleTransaction| { &m.block_height },
                    |m: &mut SettleTxCheckReq_PossibleTransaction| { &mut m.block_height },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "token_type",
                    |m: &SettleTxCheckReq_PossibleTransaction| { &m.token_type },
                    |m: &mut SettleTxCheckReq_PossibleTransaction| { &mut m.token_type },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SettleTxCheckReq_PossibleTransaction>(
                    "SettleTxCheckReq_PossibleTransaction",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SettleTxCheckReq_PossibleTransaction {
        static mut instance: ::protobuf::lazy::Lazy<SettleTxCheckReq_PossibleTransaction> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SettleTxCheckReq_PossibleTransaction,
        };
        unsafe {
            instance.get(SettleTxCheckReq_PossibleTransaction::new)
        }
    }
}

impl ::protobuf::Clear for SettleTxCheckReq_PossibleTransaction {
    fn clear(&mut self) {
        self.clear_addr_to();
        self.clear_addr_from();
        self.clear_value();
        self.clear_bridged_chain();
        self.clear_tx_id();
        self.clear_block_height();
        self.clear_token_type();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SettleTxCheckReq_PossibleTransaction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SettleTxCheckReq_PossibleTransaction {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SettleTxCheckResponse {
    // message fields
    pub marked_transactions: ::protobuf::RepeatedField<super::core::MarkedTransaction>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl SettleTxCheckResponse {
    pub fn new() -> SettleTxCheckResponse {
        ::std::default::Default::default()
    }

    // repeated .bc.MarkedTransaction marked_transactions = 1;

    pub fn clear_marked_transactions(&mut self) {
        self.marked_transactions.clear();
    }

    // Param is passed by value, moved
    pub fn set_marked_transactions(&mut self, v: ::protobuf::RepeatedField<super::core::MarkedTransaction>) {
        self.marked_transactions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_marked_transactions(&mut self) -> &mut ::protobuf::RepeatedField<super::core::MarkedTransaction> {
        &mut self.marked_transactions
    }

    // Take field
    pub fn take_marked_transactions(&mut self) -> ::protobuf::RepeatedField<super::core::MarkedTransaction> {
        ::std::mem::replace(&mut self.marked_transactions, ::protobuf::RepeatedField::new())
    }

    pub fn get_marked_transactions(&self) -> &[super::core::MarkedTransaction] {
        &self.marked_transactions
    }
}

impl ::protobuf::Message for SettleTxCheckResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.marked_transactions {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.marked_transactions)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.marked_transactions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.marked_transactions {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SettleTxCheckResponse {
        SettleTxCheckResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::core::MarkedTransaction>>(
                    "marked_transactions",
                    |m: &SettleTxCheckResponse| { &m.marked_transactions },
                    |m: &mut SettleTxCheckResponse| { &mut m.marked_transactions },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SettleTxCheckResponse>(
                    "SettleTxCheckResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SettleTxCheckResponse {
        static mut instance: ::protobuf::lazy::Lazy<SettleTxCheckResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SettleTxCheckResponse,
        };
        unsafe {
            instance.get(SettleTxCheckResponse::new)
        }
    }
}

impl ::protobuf::Clear for SettleTxCheckResponse {
    fn clear(&mut self) {
        self.clear_marked_transactions();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SettleTxCheckResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SettleTxCheckResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum RoverMessageType {
    FetchBlock = 0,
    RequestResync = 1,
    rover_block_range = 2,
}

impl ::protobuf::ProtobufEnum for RoverMessageType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<RoverMessageType> {
        match value {
            0 => ::std::option::Option::Some(RoverMessageType::FetchBlock),
            1 => ::std::option::Option::Some(RoverMessageType::RequestResync),
            2 => ::std::option::Option::Some(RoverMessageType::rover_block_range),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [RoverMessageType] = &[
            RoverMessageType::FetchBlock,
            RoverMessageType::RequestResync,
            RoverMessageType::rover_block_range,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("RoverMessageType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for RoverMessageType {
}

impl ::std::default::Default for RoverMessageType {
    fn default() -> Self {
        RoverMessageType::FetchBlock
    }
}

impl ::protobuf::reflect::ProtobufValue for RoverMessageType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0brover.proto\x12\x02bc\x1a\ncore.proto\"+\n\nRoverIdent\x12\x1d\n\n\
    rover_name\x18\x01\x20\x01(\tR\troverName\"H\n\x0fRoverSyncStatus\x12\
    \x1d\n\nrover_name\x18\x01\x20\x01(\tR\troverName\x12\x16\n\x06status\
    \x18\x02\x20\x01(\x08R\x06status\"\x94\x06\n\x0cRoverMessage\x12(\n\x04t\
    ype\x18\x01\x20\x01(\x0e2\x14.bc.RoverMessageTypeR\x04type\x121\n\x06res\
    ync\x18\x02\x20\x01(\x0b2\x17.bc.RoverMessage.ResyncH\0R\x06resync\x12>\
    \n\x0bfetch_block\x18\x03\x20\x01(\x0b2\x1b.bc.RoverMessage.FetchBlockH\
    \0R\nfetchBlock\x12N\n\x11rover_block_range\x18\x04\x20\x01(\x0b2\x20.bc\
    .RoverMessage.RoverBlockRangeH\0R\x0froverBlockRange\x1a\\\n\nFetchBlock\
    \x12(\n\nfrom_block\x18\x01\x20\x01(\x0b2\t.bc.BlockR\tfromBlock\x12$\n\
    \x08to_block\x18\x02\x20\x01(\x0b2\t.bc.BlockR\x07toBlock\x1a\xd8\x01\n\
    \x0fRoverBlockRange\x12\x1d\n\nrover_name\x18\x01\x20\x01(\tR\troverName\
    \x12%\n\x0ehighest_height\x18\x02\x20\x01(\x04R\rhighestHeight\x12#\n\rl\
    owest_height\x18\x03\x20\x01(\x04R\x0clowestHeight\x12!\n\x0chighest_has\
    h\x18\x04\x20\x01(\tR\x0bhighestHash\x12\x1f\n\x0blowest_hash\x18\x05\
    \x20\x01(\tR\nlowestHash\x12\x16\n\x06synced\x18\x06\x20\x01(\tR\x06sync\
    ed\x1a\xd2\x01\n\x06Resync\x12,\n\x0clatest_block\x18\x01\x20\x01(\x0b2\
    \t.bc.BlockR\x0blatestBlock\x12>\n\tintervals\x18\x02\x20\x03(\x0b2\x20.\
    bc.RoverMessage.Resync.IntervalR\tintervals\x1aZ\n\x08Interval\x12(\n\nf\
    rom_block\x18\x01\x20\x01(\x0b2\t.bc.BlockR\tfromBlock\x12$\n\x08to_bloc\
    k\x18\x02\x20\x01(\x0b2\t.bc.BlockR\x07toBlockB\t\n\x07payload\"\xd1\x02\
    \n\x10SettleTxCheckReq\x12]\n\x15possible_transactions\x18\x01\x20\x03(\
    \x0b2(.bc.SettleTxCheckReq.PossibleTransactionR\x14possibleTransactions\
    \x1a\xdd\x01\n\x13PossibleTransaction\x12\x17\n\x07addr_to\x18\x01\x20\
    \x01(\tR\x06addrTo\x12\x1b\n\taddr_from\x18\x02\x20\x01(\tR\x08addrFrom\
    \x12\x14\n\x05value\x18\x03\x20\x01(\x0cR\x05value\x12#\n\rbridged_chain\
    \x18\x04\x20\x01(\tR\x0cbridgedChain\x12\x13\n\x05tx_id\x18\x05\x20\x01(\
    \tR\x04txId\x12!\n\x0cblock_height\x18\x06\x20\x01(\x04R\x0bblockHeight\
    \x12\x1d\n\ntoken_type\x18\x07\x20\x01(\tR\ttokenType\"_\n\x15SettleTxCh\
    eckResponse\x12F\n\x13marked_transactions\x18\x01\x20\x03(\x0b2\x15.bc.M\
    arkedTransactionR\x12markedTransactions*L\n\x10RoverMessageType\x12\x0e\
    \n\nFetchBlock\x10\0\x12\x11\n\rRequestResync\x10\x01\x12\x15\n\x11rover\
    _block_range\x10\x022\xa0\x02\n\x05Rover\x12,\n\x04Join\x12\x0e.bc.Rover\
    Ident\x1a\x10.bc.RoverMessage\"\00\x01\x12'\n\x0cCollectBlock\x12\t.bc.B\
    lock\x1a\x08.bc.Null\"\0(\x01\x123\n\x10ReportSyncStatus\x12\x13.bc.Rove\
    rSyncStatus\x1a\x08.bc.Null\"\0\x12@\n\x10ReportBlockRange\x12\x20.bc.Ro\
    verMessage.RoverBlockRange\x1a\x08.bc.Null\"\0\x12I\n\x14IsBeforeSettleH\
    eight\x12\x14.bc.SettleTxCheckReq\x1a\x19.bc.SettleTxCheckResponse\"\0b\
    \x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}

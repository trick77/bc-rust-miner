// This file is generated by rust-protobuf 2.0.4. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct BlockFingerprint {
    // message fields
    pub blockchain: ::std::string::String,
    pub hash: ::std::string::String,
    pub timestamp: u64,
    pub is_current: bool,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl BlockFingerprint {
    pub fn new() -> BlockFingerprint {
        ::std::default::Default::default()
    }

    // string blockchain = 1;

    pub fn clear_blockchain(&mut self) {
        self.blockchain.clear();
    }

    // Param is passed by value, moved
    pub fn set_blockchain(&mut self, v: ::std::string::String) {
        self.blockchain = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_blockchain(&mut self) -> &mut ::std::string::String {
        &mut self.blockchain
    }

    // Take field
    pub fn take_blockchain(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.blockchain, ::std::string::String::new())
    }

    pub fn get_blockchain(&self) -> &str {
        &self.blockchain
    }

    // string hash = 2;

    pub fn clear_hash(&mut self) {
        self.hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_hash(&mut self, v: ::std::string::String) {
        self.hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hash(&mut self) -> &mut ::std::string::String {
        &mut self.hash
    }

    // Take field
    pub fn take_hash(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.hash, ::std::string::String::new())
    }

    pub fn get_hash(&self) -> &str {
        &self.hash
    }

    // uint64 timestamp = 3;

    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = v;
    }

    pub fn get_timestamp(&self) -> u64 {
        self.timestamp
    }

    // bool is_current = 4;

    pub fn clear_is_current(&mut self) {
        self.is_current = false;
    }

    // Param is passed by value, moved
    pub fn set_is_current(&mut self, v: bool) {
        self.is_current = v;
    }

    pub fn get_is_current(&self) -> bool {
        self.is_current
    }
}

impl ::protobuf::Message for BlockFingerprint {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.blockchain)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.hash)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_current = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.blockchain.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.blockchain);
        }
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.hash);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(3, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.is_current != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.blockchain.is_empty() {
            os.write_string(1, &self.blockchain)?;
        }
        if !self.hash.is_empty() {
            os.write_string(2, &self.hash)?;
        }
        if self.timestamp != 0 {
            os.write_uint64(3, self.timestamp)?;
        }
        if self.is_current != false {
            os.write_bool(4, self.is_current)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BlockFingerprint {
        BlockFingerprint::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "blockchain",
                    |m: &BlockFingerprint| { &m.blockchain },
                    |m: &mut BlockFingerprint| { &mut m.blockchain },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "hash",
                    |m: &BlockFingerprint| { &m.hash },
                    |m: &mut BlockFingerprint| { &mut m.hash },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "timestamp",
                    |m: &BlockFingerprint| { &m.timestamp },
                    |m: &mut BlockFingerprint| { &mut m.timestamp },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "is_current",
                    |m: &BlockFingerprint| { &m.is_current },
                    |m: &mut BlockFingerprint| { &mut m.is_current },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<BlockFingerprint>(
                    "BlockFingerprint",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static BlockFingerprint {
        static mut instance: ::protobuf::lazy::Lazy<BlockFingerprint> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BlockFingerprint,
        };
        unsafe {
            instance.get(BlockFingerprint::new)
        }
    }
}

impl ::protobuf::Clear for BlockFingerprint {
    fn clear(&mut self) {
        self.clear_blockchain();
        self.clear_hash();
        self.clear_timestamp();
        self.clear_is_current();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BlockFingerprint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BlockFingerprint {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MinerRequest {
    // message fields
    pub work_id: ::std::string::String,
    pub current_timestamp: u64,
    pub offset: i32,
    pub work: ::std::string::String,
    pub miner_key: ::std::string::String,
    pub merkle_root: ::std::string::String,
    pub difficulty: ::std::string::String,
    pub last_previous_block: ::protobuf::SingularPtrField<super::core::BcBlock>,
    pub new_block_headers: ::protobuf::SingularPtrField<super::core::BlockchainHeaders>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl MinerRequest {
    pub fn new() -> MinerRequest {
        ::std::default::Default::default()
    }

    // string work_id = 1;

    pub fn clear_work_id(&mut self) {
        self.work_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_work_id(&mut self, v: ::std::string::String) {
        self.work_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_work_id(&mut self) -> &mut ::std::string::String {
        &mut self.work_id
    }

    // Take field
    pub fn take_work_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.work_id, ::std::string::String::new())
    }

    pub fn get_work_id(&self) -> &str {
        &self.work_id
    }

    // uint64 current_timestamp = 2;

    pub fn clear_current_timestamp(&mut self) {
        self.current_timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_current_timestamp(&mut self, v: u64) {
        self.current_timestamp = v;
    }

    pub fn get_current_timestamp(&self) -> u64 {
        self.current_timestamp
    }

    // int32 offset = 3;

    pub fn clear_offset(&mut self) {
        self.offset = 0;
    }

    // Param is passed by value, moved
    pub fn set_offset(&mut self, v: i32) {
        self.offset = v;
    }

    pub fn get_offset(&self) -> i32 {
        self.offset
    }

    // string work = 4;

    pub fn clear_work(&mut self) {
        self.work.clear();
    }

    // Param is passed by value, moved
    pub fn set_work(&mut self, v: ::std::string::String) {
        self.work = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_work(&mut self) -> &mut ::std::string::String {
        &mut self.work
    }

    // Take field
    pub fn take_work(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.work, ::std::string::String::new())
    }

    pub fn get_work(&self) -> &str {
        &self.work
    }

    // string miner_key = 5;

    pub fn clear_miner_key(&mut self) {
        self.miner_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_miner_key(&mut self, v: ::std::string::String) {
        self.miner_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_miner_key(&mut self) -> &mut ::std::string::String {
        &mut self.miner_key
    }

    // Take field
    pub fn take_miner_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.miner_key, ::std::string::String::new())
    }

    pub fn get_miner_key(&self) -> &str {
        &self.miner_key
    }

    // string merkle_root = 6;

    pub fn clear_merkle_root(&mut self) {
        self.merkle_root.clear();
    }

    // Param is passed by value, moved
    pub fn set_merkle_root(&mut self, v: ::std::string::String) {
        self.merkle_root = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_merkle_root(&mut self) -> &mut ::std::string::String {
        &mut self.merkle_root
    }

    // Take field
    pub fn take_merkle_root(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.merkle_root, ::std::string::String::new())
    }

    pub fn get_merkle_root(&self) -> &str {
        &self.merkle_root
    }

    // string difficulty = 7;

    pub fn clear_difficulty(&mut self) {
        self.difficulty.clear();
    }

    // Param is passed by value, moved
    pub fn set_difficulty(&mut self, v: ::std::string::String) {
        self.difficulty = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_difficulty(&mut self) -> &mut ::std::string::String {
        &mut self.difficulty
    }

    // Take field
    pub fn take_difficulty(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.difficulty, ::std::string::String::new())
    }

    pub fn get_difficulty(&self) -> &str {
        &self.difficulty
    }

    // .bc.BcBlock last_previous_block = 8;

    pub fn clear_last_previous_block(&mut self) {
        self.last_previous_block.clear();
    }

    pub fn has_last_previous_block(&self) -> bool {
        self.last_previous_block.is_some()
    }

    // Param is passed by value, moved
    pub fn set_last_previous_block(&mut self, v: super::core::BcBlock) {
        self.last_previous_block = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_last_previous_block(&mut self) -> &mut super::core::BcBlock {
        if self.last_previous_block.is_none() {
            self.last_previous_block.set_default();
        }
        self.last_previous_block.as_mut().unwrap()
    }

    // Take field
    pub fn take_last_previous_block(&mut self) -> super::core::BcBlock {
        self.last_previous_block.take().unwrap_or_else(|| super::core::BcBlock::new())
    }

    pub fn get_last_previous_block(&self) -> &super::core::BcBlock {
        self.last_previous_block.as_ref().unwrap_or_else(|| super::core::BcBlock::default_instance())
    }

    // .bc.BlockchainHeaders new_block_headers = 9;

    pub fn clear_new_block_headers(&mut self) {
        self.new_block_headers.clear();
    }

    pub fn has_new_block_headers(&self) -> bool {
        self.new_block_headers.is_some()
    }

    // Param is passed by value, moved
    pub fn set_new_block_headers(&mut self, v: super::core::BlockchainHeaders) {
        self.new_block_headers = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_new_block_headers(&mut self) -> &mut super::core::BlockchainHeaders {
        if self.new_block_headers.is_none() {
            self.new_block_headers.set_default();
        }
        self.new_block_headers.as_mut().unwrap()
    }

    // Take field
    pub fn take_new_block_headers(&mut self) -> super::core::BlockchainHeaders {
        self.new_block_headers.take().unwrap_or_else(|| super::core::BlockchainHeaders::new())
    }

    pub fn get_new_block_headers(&self) -> &super::core::BlockchainHeaders {
        self.new_block_headers.as_ref().unwrap_or_else(|| super::core::BlockchainHeaders::default_instance())
    }
}

impl ::protobuf::Message for MinerRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.last_previous_block {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.new_block_headers {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.work_id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.current_timestamp = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.offset = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.work)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.miner_key)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.merkle_root)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.difficulty)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.last_previous_block)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.new_block_headers)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.work_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.work_id);
        }
        if self.current_timestamp != 0 {
            my_size += ::protobuf::rt::value_size(2, self.current_timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.offset != 0 {
            my_size += ::protobuf::rt::value_size(3, self.offset, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.work.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.work);
        }
        if !self.miner_key.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.miner_key);
        }
        if !self.merkle_root.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.merkle_root);
        }
        if !self.difficulty.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.difficulty);
        }
        if let Some(ref v) = self.last_previous_block.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.new_block_headers.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.work_id.is_empty() {
            os.write_string(1, &self.work_id)?;
        }
        if self.current_timestamp != 0 {
            os.write_uint64(2, self.current_timestamp)?;
        }
        if self.offset != 0 {
            os.write_int32(3, self.offset)?;
        }
        if !self.work.is_empty() {
            os.write_string(4, &self.work)?;
        }
        if !self.miner_key.is_empty() {
            os.write_string(5, &self.miner_key)?;
        }
        if !self.merkle_root.is_empty() {
            os.write_string(6, &self.merkle_root)?;
        }
        if !self.difficulty.is_empty() {
            os.write_string(7, &self.difficulty)?;
        }
        if let Some(ref v) = self.last_previous_block.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.new_block_headers.as_ref() {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MinerRequest {
        MinerRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "work_id",
                    |m: &MinerRequest| { &m.work_id },
                    |m: &mut MinerRequest| { &mut m.work_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "current_timestamp",
                    |m: &MinerRequest| { &m.current_timestamp },
                    |m: &mut MinerRequest| { &mut m.current_timestamp },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "offset",
                    |m: &MinerRequest| { &m.offset },
                    |m: &mut MinerRequest| { &mut m.offset },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "work",
                    |m: &MinerRequest| { &m.work },
                    |m: &mut MinerRequest| { &mut m.work },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "miner_key",
                    |m: &MinerRequest| { &m.miner_key },
                    |m: &mut MinerRequest| { &mut m.miner_key },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "merkle_root",
                    |m: &MinerRequest| { &m.merkle_root },
                    |m: &mut MinerRequest| { &mut m.merkle_root },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "difficulty",
                    |m: &MinerRequest| { &m.difficulty },
                    |m: &mut MinerRequest| { &mut m.difficulty },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::core::BcBlock>>(
                    "last_previous_block",
                    |m: &MinerRequest| { &m.last_previous_block },
                    |m: &mut MinerRequest| { &mut m.last_previous_block },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::core::BlockchainHeaders>>(
                    "new_block_headers",
                    |m: &MinerRequest| { &m.new_block_headers },
                    |m: &mut MinerRequest| { &mut m.new_block_headers },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<MinerRequest>(
                    "MinerRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static MinerRequest {
        static mut instance: ::protobuf::lazy::Lazy<MinerRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const MinerRequest,
        };
        unsafe {
            instance.get(MinerRequest::new)
        }
    }
}

impl ::protobuf::Clear for MinerRequest {
    fn clear(&mut self) {
        self.clear_work_id();
        self.clear_current_timestamp();
        self.clear_offset();
        self.clear_work();
        self.clear_miner_key();
        self.clear_merkle_root();
        self.clear_difficulty();
        self.clear_last_previous_block();
        self.clear_new_block_headers();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MinerRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MinerRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MinerResponse {
    // message fields
    pub result: MinerResponseResult,
    pub nonce: ::std::string::String,
    pub difficulty: ::std::string::String,
    pub distance: ::std::string::String,
    pub timestamp: u64,
    pub iterations: u64,
    pub time_diff: u64,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl MinerResponse {
    pub fn new() -> MinerResponse {
        ::std::default::Default::default()
    }

    // .bc.MinerResponseResult result = 1;

    pub fn clear_result(&mut self) {
        self.result = MinerResponseResult::Canceled;
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: MinerResponseResult) {
        self.result = v;
    }

    pub fn get_result(&self) -> MinerResponseResult {
        self.result
    }

    // string nonce = 2;

    pub fn clear_nonce(&mut self) {
        self.nonce.clear();
    }

    // Param is passed by value, moved
    pub fn set_nonce(&mut self, v: ::std::string::String) {
        self.nonce = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nonce(&mut self) -> &mut ::std::string::String {
        &mut self.nonce
    }

    // Take field
    pub fn take_nonce(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.nonce, ::std::string::String::new())
    }

    pub fn get_nonce(&self) -> &str {
        &self.nonce
    }

    // string difficulty = 3;

    pub fn clear_difficulty(&mut self) {
        self.difficulty.clear();
    }

    // Param is passed by value, moved
    pub fn set_difficulty(&mut self, v: ::std::string::String) {
        self.difficulty = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_difficulty(&mut self) -> &mut ::std::string::String {
        &mut self.difficulty
    }

    // Take field
    pub fn take_difficulty(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.difficulty, ::std::string::String::new())
    }

    pub fn get_difficulty(&self) -> &str {
        &self.difficulty
    }

    // string distance = 4;

    pub fn clear_distance(&mut self) {
        self.distance.clear();
    }

    // Param is passed by value, moved
    pub fn set_distance(&mut self, v: ::std::string::String) {
        self.distance = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_distance(&mut self) -> &mut ::std::string::String {
        &mut self.distance
    }

    // Take field
    pub fn take_distance(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.distance, ::std::string::String::new())
    }

    pub fn get_distance(&self) -> &str {
        &self.distance
    }

    // uint64 timestamp = 5;

    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = v;
    }

    pub fn get_timestamp(&self) -> u64 {
        self.timestamp
    }

    // uint64 iterations = 6;

    pub fn clear_iterations(&mut self) {
        self.iterations = 0;
    }

    // Param is passed by value, moved
    pub fn set_iterations(&mut self, v: u64) {
        self.iterations = v;
    }

    pub fn get_iterations(&self) -> u64 {
        self.iterations
    }

    // uint64 time_diff = 7;

    pub fn clear_time_diff(&mut self) {
        self.time_diff = 0;
    }

    // Param is passed by value, moved
    pub fn set_time_diff(&mut self, v: u64) {
        self.time_diff = v;
    }

    pub fn get_time_diff(&self) -> u64 {
        self.time_diff
    }
}

impl ::protobuf::Message for MinerResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.result, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.nonce)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.difficulty)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.distance)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.iterations = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.time_diff = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.result != MinerResponseResult::Canceled {
            my_size += ::protobuf::rt::enum_size(1, self.result);
        }
        if !self.nonce.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.nonce);
        }
        if !self.difficulty.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.difficulty);
        }
        if !self.distance.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.distance);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(5, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.iterations != 0 {
            my_size += ::protobuf::rt::value_size(6, self.iterations, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.time_diff != 0 {
            my_size += ::protobuf::rt::value_size(7, self.time_diff, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.result != MinerResponseResult::Canceled {
            os.write_enum(1, self.result.value())?;
        }
        if !self.nonce.is_empty() {
            os.write_string(2, &self.nonce)?;
        }
        if !self.difficulty.is_empty() {
            os.write_string(3, &self.difficulty)?;
        }
        if !self.distance.is_empty() {
            os.write_string(4, &self.distance)?;
        }
        if self.timestamp != 0 {
            os.write_uint64(5, self.timestamp)?;
        }
        if self.iterations != 0 {
            os.write_uint64(6, self.iterations)?;
        }
        if self.time_diff != 0 {
            os.write_uint64(7, self.time_diff)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MinerResponse {
        MinerResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<MinerResponseResult>>(
                    "result",
                    |m: &MinerResponse| { &m.result },
                    |m: &mut MinerResponse| { &mut m.result },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "nonce",
                    |m: &MinerResponse| { &m.nonce },
                    |m: &mut MinerResponse| { &mut m.nonce },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "difficulty",
                    |m: &MinerResponse| { &m.difficulty },
                    |m: &mut MinerResponse| { &mut m.difficulty },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "distance",
                    |m: &MinerResponse| { &m.distance },
                    |m: &mut MinerResponse| { &mut m.distance },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "timestamp",
                    |m: &MinerResponse| { &m.timestamp },
                    |m: &mut MinerResponse| { &mut m.timestamp },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "iterations",
                    |m: &MinerResponse| { &m.iterations },
                    |m: &mut MinerResponse| { &mut m.iterations },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "time_diff",
                    |m: &MinerResponse| { &m.time_diff },
                    |m: &mut MinerResponse| { &mut m.time_diff },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<MinerResponse>(
                    "MinerResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static MinerResponse {
        static mut instance: ::protobuf::lazy::Lazy<MinerResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const MinerResponse,
        };
        unsafe {
            instance.get(MinerResponse::new)
        }
    }
}

impl ::protobuf::Clear for MinerResponse {
    fn clear(&mut self) {
        self.clear_result();
        self.clear_nonce();
        self.clear_difficulty();
        self.clear_distance();
        self.clear_timestamp();
        self.clear_iterations();
        self.clear_time_diff();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MinerResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MinerResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum MinerResponseResult {
    Canceled = 0,
    Ok = 1,
    Error = 2,
}

impl ::protobuf::ProtobufEnum for MinerResponseResult {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<MinerResponseResult> {
        match value {
            0 => ::std::option::Option::Some(MinerResponseResult::Canceled),
            1 => ::std::option::Option::Some(MinerResponseResult::Ok),
            2 => ::std::option::Option::Some(MinerResponseResult::Error),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [MinerResponseResult] = &[
            MinerResponseResult::Canceled,
            MinerResponseResult::Ok,
            MinerResponseResult::Error,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("MinerResponseResult", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for MinerResponseResult {
}

impl ::std::default::Default for MinerResponseResult {
    fn default() -> Self {
        MinerResponseResult::Canceled
    }
}

impl ::protobuf::reflect::ProtobufValue for MinerResponseResult {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0bminer.proto\x12\x02bc\x1a\ncore.proto\"\x83\x01\n\x10BlockFingerpr\
    int\x12\x1e\n\nblockchain\x18\x01\x20\x01(\tR\nblockchain\x12\x12\n\x04h\
    ash\x18\x02\x20\x01(\tR\x04hash\x12\x1c\n\ttimestamp\x18\x03\x20\x01(\
    \x04R\ttimestamp\x12\x1d\n\nis_current\x18\x04\x20\x01(\x08R\tisCurrent\
    \"\xde\x02\n\x0cMinerRequest\x12\x17\n\x07work_id\x18\x01\x20\x01(\tR\
    \x06workId\x12+\n\x11current_timestamp\x18\x02\x20\x01(\x04R\x10currentT\
    imestamp\x12\x16\n\x06offset\x18\x03\x20\x01(\x05R\x06offset\x12\x12\n\
    \x04work\x18\x04\x20\x01(\tR\x04work\x12\x1b\n\tminer_key\x18\x05\x20\
    \x01(\tR\x08minerKey\x12\x1f\n\x0bmerkle_root\x18\x06\x20\x01(\tR\nmerkl\
    eRoot\x12\x1e\n\ndifficulty\x18\x07\x20\x01(\tR\ndifficulty\x12;\n\x13la\
    st_previous_block\x18\x08\x20\x01(\x0b2\x0b.bc.BcBlockR\x11lastPreviousB\
    lock\x12A\n\x11new_block_headers\x18\t\x20\x01(\x0b2\x15.bc.BlockchainHe\
    adersR\x0fnewBlockHeaders\"\xed\x01\n\rMinerResponse\x12/\n\x06result\
    \x18\x01\x20\x01(\x0e2\x17.bc.MinerResponseResultR\x06result\x12\x14\n\
    \x05nonce\x18\x02\x20\x01(\tR\x05nonce\x12\x1e\n\ndifficulty\x18\x03\x20\
    \x01(\tR\ndifficulty\x12\x1a\n\x08distance\x18\x04\x20\x01(\tR\x08distan\
    ce\x12\x1c\n\ttimestamp\x18\x05\x20\x01(\x04R\ttimestamp\x12\x1e\n\niter\
    ations\x18\x06\x20\x01(\x04R\niterations\x12\x1b\n\ttime_diff\x18\x07\
    \x20\x01(\x04R\x08timeDiff*6\n\x13MinerResponseResult\x12\x0c\n\x08Cance\
    led\x10\0\x12\x06\n\x02Ok\x10\x01\x12\t\n\x05Error\x10\x0226\n\x05Miner\
    \x12-\n\x04Mine\x12\x10.bc.MinerRequest\x1a\x11.bc.MinerResponse\"\0b\
    \x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
